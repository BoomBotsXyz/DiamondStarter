/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IDiamond, IDiamondInterface } from "../../interfaces/IDiamond";

const _abi = [
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

export class IDiamond__factory {
  static readonly abi = _abi;
  static createInterface(): IDiamondInterface {
    return new utils.Interface(_abi) as IDiamondInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IDiamond {
    return new Contract(address, _abi, signerOrProvider) as IDiamond;
  }
}
