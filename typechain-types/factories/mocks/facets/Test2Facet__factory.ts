/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Test2Facet,
  Test2FacetInterface,
} from "../../../mocks/facets/Test2Facet";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "funcNum",
        type: "uint256",
      },
    ],
    name: "Test2Event",
    type: "event",
  },
  {
    inputs: [],
    name: "testFunc1",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "testFunc2",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "testFunc3",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610308806100206000396000f3fe6080604052600436106100345760003560e01c80630875236014610039578063561f5f89146100435780639a5fb5a81461004d575b600080fd5b610041610057565b005b61004b6100cd565b005b610055610143565b005b61006b67bc18e31de50544c260c01b6101b9565b61007f67fb7b8a31dade5bf560c01b6101b9565b61009367145b5b1885e9181560c01b6101b9565b7f941adf755b36efb96d72ccc68c0eb102df0fd2289687d2d09cf4f1d31c36c07160026040516100c3919061020b565b60405180910390a1565b6100e16761a4ea8d041d150260c01b6101b9565b6100f5678315993ab705c03260c01b6101b9565b610109678a0f024bbc7663ce60c01b6101b9565b7f941adf755b36efb96d72ccc68c0eb102df0fd2289687d2d09cf4f1d31c36c07160016040516101399190610261565b60405180910390a1565b610157674324821d7d95b61f60c01b6101b9565b61016b67845a24f2c9ef6c2f60c01b6101b9565b61017f67675842fadee8f84c60c01b6101b9565b7f941adf755b36efb96d72ccc68c0eb102df0fd2289687d2d09cf4f1d31c36c07160036040516101af91906102b7565b60405180910390a1565b50565b6000819050919050565b6000819050919050565b6000819050919050565b60006101f56101f06101eb846101bc565b6101d0565b6101c6565b9050919050565b610205816101da565b82525050565b600060208201905061022060008301846101fc565b92915050565b6000819050919050565b600061024b61024661024184610226565b6101d0565b6101c6565b9050919050565b61025b81610230565b82525050565b60006020820190506102766000830184610252565b92915050565b6000819050919050565b60006102a161029c6102978461027c565b6101d0565b6101c6565b9050919050565b6102b181610286565b82525050565b60006020820190506102cc60008301846102a8565b9291505056fea2646970667358221220934b0d170b12972af5a5f75ddd47d927d9f78fee09d3f1026c3c82e1959d696a64736f6c63430008180033";

type Test2FacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Test2FacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Test2Facet__factory extends ContractFactory {
  constructor(...args: Test2FacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Test2Facet> {
    return super.deploy(overrides || {}) as Promise<Test2Facet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Test2Facet {
    return super.attach(address) as Test2Facet;
  }
  override connect(signer: Signer): Test2Facet__factory {
    return super.connect(signer) as Test2Facet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Test2FacetInterface {
    return new utils.Interface(_abi) as Test2FacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Test2Facet {
    return new Contract(address, _abi, signerOrProvider) as Test2Facet;
  }
}
