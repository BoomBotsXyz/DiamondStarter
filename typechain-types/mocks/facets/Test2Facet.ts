/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface Test2FacetInterface extends utils.Interface {
  functions: {
    "testFunc1()": FunctionFragment;
    "testFunc2()": FunctionFragment;
    "testFunc3()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "testFunc1" | "testFunc2" | "testFunc3"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "testFunc1", values?: undefined): string;
  encodeFunctionData(functionFragment: "testFunc2", values?: undefined): string;
  encodeFunctionData(functionFragment: "testFunc3", values?: undefined): string;

  decodeFunctionResult(functionFragment: "testFunc1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testFunc2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testFunc3", data: BytesLike): Result;

  events: {
    "Test2Event(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Test2Event"): EventFragment;
}

export interface Test2EventEventObject {
  funcNum: BigNumber;
}
export type Test2EventEvent = TypedEvent<[BigNumber], Test2EventEventObject>;

export type Test2EventEventFilter = TypedEventFilter<Test2EventEvent>;

export interface Test2Facet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Test2FacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    testFunc1(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testFunc2(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testFunc3(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  testFunc1(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testFunc2(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testFunc3(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    testFunc1(overrides?: CallOverrides): Promise<void>;

    testFunc2(overrides?: CallOverrides): Promise<void>;

    testFunc3(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Test2Event(uint256)"(funcNum?: null): Test2EventEventFilter;
    Test2Event(funcNum?: null): Test2EventEventFilter;
  };

  estimateGas: {
    testFunc1(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testFunc2(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testFunc3(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    testFunc1(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testFunc2(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testFunc3(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
